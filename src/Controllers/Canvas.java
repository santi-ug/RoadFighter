package Controllers;

import Models.BadCar;
import Models.GeometricFigure;
import Models.GoodCar;
import Models.PersonalCar;
import Models.Picture;
import Models.Polygon;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.LinkedList;
import javax.swing.JOptionPane;



/**
 *
 * @author Santi
 */
public class Canvas extends javax.swing.JPanel implements Runnable {

    private LinkedList<GeometricFigure> figures;
    private boolean playing;
    
    /**
     * Creates new form Canvas
     */
    public Canvas() {
        initComponents();
        this.figures = new LinkedList<>();
        this.playing = false;
    }
    
    public void drawImage(Graphics p, Picture i) {
        Toolkit t = Toolkit.getDefaultToolkit();
        Image pic = t.getImage(i.getUrl());
        p.drawImage(pic, i.getX(), i.getY(), i.getWidth(), i.getHeight(), this);     
    }
    
    public void drawPolygon(Graphics p, Polygon pol) {
        if (pol.getBorderColor()!= null) {
            p.setColor(pol.getBorderColor());
        }
        
        p.drawPolygon(pol.getX(), pol.getY(), pol.getX().length);
        
        if (pol.getFillColor()!= null) {
            p.setColor(pol.getFillColor());
        }
        
        p.fillPolygon(pol.getX(), pol.getY(), pol.getX().length);
        
    }
    
    @Override
    public void paintComponent(Graphics p) {
        super.paintComponent(p);
        for (GeometricFigure current : this.getFigures()) {
            if (current instanceof Picture)     drawImage(p, (Picture) current);
            else if (current instanceof Polygon)   drawPolygon(p, (Polygon) current);
        }    
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        System.out.println("Playing");
        while(this.isPlaying()) {
            this.move();
            repaint();
            wait(10);
        }
        System.out.println("Stopped Playing");
    }
    
    private void wait(int ms) {
        try {
            Thread.sleep(ms);
            
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }
    
    public boolean verifyCollision(GeometricFigure player) {
        boolean collided = false;
        int i = 0;
        while (i < this.figures.size() && !collided) {
            if (player != this.figures.get(i) && player.getHitbox().intersects(this.figures.get(i).getHitbox())) collided = true;
            i++;
        }
        return collided;
    }
    
    public void move() {
        for (GeometricFigure current: this.figures) {
            
            if (!current.isMachine()) {
                boolean ans = verifyCollision(current);
                if (ans) {
                    JOptionPane.showMessageDialog(this, "Game Over");
                    this.playing = false;
                }
            }
            if (current instanceof BadCar) {
                if (current.getDirection() == 5 && ((BadCar) current).getY() > 0 && ((BadCar) current).getY() < this.getHeight() - 100) {
                    ((BadCar) current).moveDown(10);
                }
            }
            if (current instanceof GoodCar) {
                if (current.getDirection() == 5 && ((GoodCar) current).getY() > 0 && ((GoodCar) current).getY() < this.getHeight() - 100) {
                    ((GoodCar) current).moveDown(10);
                }
            }
            if (current instanceof PersonalCar) {
                if (current.getDirection() == 3 && ((PersonalCar) current).getX() > 0 && ((PersonalCar) current).getX() < this.getWidth()) {
                    ((PersonalCar) current).moveR(10);
                }
                else if (current.getDirection() == 7 && ((PersonalCar) current).getX() > 0 && ((PersonalCar) current).getX() < this.getWidth()) {
                    ((PersonalCar) current).moveL(10);
                }
                
            }   
        }
    }
    
    /**
     * @return the figures
     */
    public LinkedList<GeometricFigure> getFigures() {
        return figures;
    }

    /**
     * @param figures the figures to set
     */
    public void setFigures(LinkedList<GeometricFigure> figures) {
        this.figures = figures;
    }

    /**
     * @return the playing
     */
    public boolean isPlaying() {
        return playing;
    }

    /**
     * @param playing the playing to set
     */
    public void setPlaying(boolean playing) {
        this.playing = playing;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
